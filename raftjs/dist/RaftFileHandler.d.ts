import RaftMsgHandler from './RaftMsgHandler';
import { RaftFileDownloadResult, RaftFileSendType, RaftProgressCBType } from './RaftTypes';
import RaftCommsStats from './RaftCommsStats';
export default class RaftFileHandler {
    private _msgHandler;
    private BLOCK_ACK_TIMEOUT_MS;
    private _requestedFileBlockSize;
    private _fileBlockSize;
    private _requestedBatchAckSize;
    private _batchAckSize;
    private _sendWithoutBatchAcks;
    private _ackedFilePos;
    private _batchAckReceived;
    private _isTxCancelled;
    private _isRxCancelled;
    private _fileRxActive;
    private _fileRxBatchMsgSize;
    private _fileRxBatchAckSize;
    private _fileRxStreamID;
    private _fileRxFileLen;
    private _fileRxCrc16;
    private _fileRxBuffer;
    private _fileRxLastAckTime;
    private _fileRxLastBlockTime;
    private _fileRxLastAckPos;
    private OVERALL_FILE_TRANSFER_TIMEOUT_MS;
    private FILE_RX_ACK_RESEND_TIMEOUT_MS;
    private _commsStats;
    private _msgAwaitList;
    private MAX_OUTSTANDING_FILE_BLOCK_SEND_PROMISES;
    constructor(msgHandler: RaftMsgHandler, commsStats: RaftCommsStats);
    setRequestedFileBlockSize(blockSize: number): void;
    setRequestedBatchAckSize(batchAckSize: number): void;
    fileSend(fileName: string, fileType: RaftFileSendType, fileDest: string, fileContents: Uint8Array, progressCallback: ((sent: number, total: number, progress: number) => void) | undefined): Promise<boolean>;
    fileSendCancel(): Promise<void>;
    _sendFileStartMsg(fileName: string, fileType: RaftFileSendType, fileDest: string, fileContents: Uint8Array): Promise<boolean>;
    _sendFileEndMsg(fileName: string, fileType: RaftFileSendType, fileDest: string, fileContents: Uint8Array): Promise<boolean>;
    _sendFileCancelMsg(): Promise<void>;
    _sendFileContents(fileContents: Uint8Array, progressCallback: ((sent: number, total: number, progress: number) => void) | undefined): Promise<boolean>;
    batchAck(timeout: number): Promise<void>;
    _sendFileBlock(fileContents: Uint8Array, blockStart: number): Promise<boolean>;
    onOktoMsg(fileOkTo: number): void;
    awaitOutstandingMsgPromises(all: boolean): Promise<void>;
    fileReceive(fileName: string, fileSource: string, progressCallback: RaftProgressCBType | undefined): Promise<RaftFileDownloadResult>;
    fileReceiveCancel(): Promise<void>;
    _receiveFileStart(fileName: string, bridgeID: number | undefined): Promise<boolean>;
    _receiveFileContents(progressCallback: RaftProgressCBType | undefined, bridgeID: number | undefined): Promise<RaftFileDownloadResult>;
    _receiveFileEnd(fileName: string, bridgeID: number | undefined): Promise<boolean>;
    _sendFileRxCancelMsg(bridgeID: number | undefined): Promise<void>;
    onFileBlock(filePos: number, fileBlockData: Uint8Array): void;
    isFileRxActive(): boolean;
}
